---
# Metadonnées générales de la présentation
theme: seriph # Ou un autre thème de votre choix: default, apple-basic, etc.
background: /images/bandeau_bleu.png
title: 'Projet Fil Rouge: Gastronome Créatif'
info: |
  ## Présentation du Projet Fil Rouge
  Réalisé par Ceyhane Yilmaz dans le cadre de la formation Concepteur Développeur d'Applications chez 2iSA.
# Classe CSS pour la première diapositive
class: text-center
# Transition par défaut entre les diapositives
transition: slide-left
# Activer la syntaxe MDC (Markdown Components)
mdc: true
---

# Projet Fil Rouge: Gastronome Créatif

**Dossier Projet CDA**

**Par Ceyhane Yilmaz**

**2iSA Millau - 2025** 

---
layout: image-right
image: /images/github.png
class: my-cool-content-on-the-left
---

# Présentation Personnelle

* **Nom :** Ceyhane Yilmaz 
* **Objectif :** Devenir Concepteur Développeur d’Application Full-Stack qualifié.
* **Expérience :** ~10 ans d'intérêt pour l'informatique, résolution de problèmes, automatisation. Forte intuition développée.
* **Parcours :** Licence Informatique (1 an, manque de pratique), Licence Japonais (Toulouse), tentatives de contributions (jeu vidéo soundsphere), petits scripts. Motivation renouvelée avec 2iSA.

::right::



---

# Formation CDA (2iSA)

* **Métier :** Concevoir et développer des services numériques en respectant normes et standards. Automatisation de processus métier. Intervention suite à demandes client/MOA/Chef de projet. Emplois variés (salarié, ESN, indépendant).
* **Structure :** 3 activités principales + projet fil rouge pour la pratique. Durée : 69 semaines (incluant 12 semaines de PAE).
* **Prérequis & Aptitudes :** Logique, analyse, synthèse, organisation, communication, autonomie, curiosité, travail d'équipe.

Mon parcours atypique m'a donné une perspective unique. La formation CDA vise à former des développeurs polyvalents et adaptables.

---

# Le Projet Fil Rouge: Gastronome Créatif

* **Nature :** Mise en situation professionnelle. Construction d'une application complète en plusieurs jalons.
* **Client Fictif :** "Gastronome Créatif".
* **Objectifs Pédagogiques :**
    * Apporter de la cohérence aux apprentissages.
    * Mobiliser l'ensemble des compétences acquises.
    * Support principal pour les Évaluations (EPCF).
    * Mettre en œuvre les compétences Front-end et Back-end (Jalon 1).
    * Alimenter le Dossier Professionnel (DP).
* **Jalon 1 (actuel) :** Développement d'un site web dynamique et sécurisé (plateforme de partage de recettes).
* **Jalon 2 (à venir) :** Application desktop, API REST, tests, déploiement.

Le projet Fil Rouge est central dans la formation, simulant un développement réel pour appliquer et valider nos compétences.

---

# Compétences Couvertes (Jalon 1)

* **Développer une application :**
    * Interfaces utilisateurs (Front-end).
    * Composants métiers (UX).
* **Concevoir et développer une application sécurisée organisée en couches :**
    * Composants d’accès aux données (SQL/NoSQL).
* **Préparer le déploiement d’une application sécurisée.**
* **Compétences Transverses :**
    * Actualiser et partager ses compétences.
    * Contribuer à la gestion d’un projet informatique.

Ce premier jalon se concentre sur le développement web (front, back, base de données) et introduit la gestion de projet.

---

# Expression des Besoins

* **Contexte :** Projet pédagogique simulant un besoin client. Application des modules M2 (Front) et M3 (Back). Support d'évaluation (EPCF) et alimentation du DP.
* **Objectif Principal :** Plateforme web de mise en relation de passionnés de cuisine.
* **Fonctionnalités Clés :**
    * Découvrir, partager, noter, commenter des recettes.
    * Deux rôles : Utilisateurs et Administrateurs.
* **Besoins Techniques & Contraintes :**
    * Site **responsive** (PC, tablette, mobile).
    * Respect du **RGPD** (données personnelles, cookies).
    * Site multi-pages (min 6 pages).
    * Gestion erreur 404, réécriture d'URL.

---

# Spécifications Fonctionnelles (Utilisateurs)

* **Authentification :** Inscription (email, ID, MDP), Connexion. Accès conditionnel après connexion.
* **Consultation :** Parcourir par catégories, voir détail recette.
* **Recherche :** Mots-clés (API Fetch), filtres avancés (durée, catégorie, difficulté, ingrédients, type). Affichage en vignettes.
* **Détail Recette :** Titre, ingrédients/quantités, étapes (masquables), temps, note, commentaires.
* **Création/Modification :** Formulaire complet (titre, ingrédients, instructions, temps, difficulté, catégorie, photo), validation. Modification **uniquement de ses propres recettes**.
* **Interaction :** Noter (1-5 étoiles), commenter.
* **Accueil Perso :** Afficher les recettes créées par l'utilisateur.

Les besoins définissent une application web classique de partage de contenu, avec un accent sur l'ergonomie (responsive) et la conformité légale (RGPD). Les utilisateurs ont des droits standards, tandis que les admins ont des pouvoirs étendus.

---

# Spécifications Fonctionnelles (Admin) & Techniques

* **Fonctionnalités Administrateur :**
    * Possède tous les droits utilisateur standard.
    * Modification de **toutes** les recettes.
    * Consultation de la liste des utilisateurs.
    * *(Limitation Jalon 1 : Pas de suppression user/recette)*.
* **Spécifications Techniques :**
    * **Back-end :** ASP.NET Core MVC (C#).
    * **Front-end :** HTML5, CSS3, JavaScript/TypeScript.
    * **Base de Données :** PostgreSQL (via Docker).
    * **API Recherche :** `Workspace`.
    * **IDE :** Visual Studio (Back), VS Code (Front).
    * **Versionning :** Git / GitHub.
    * **Responsive :** Approche 'mobile first' préconisée.
    * **Authentification :** Gérée par ASP.NET Core MVC.
    * **Validation :** W3C pour pages principales, CSS factorisé.
    * **Prototypage :** Penpot.

Les admins ont un rôle de modération. Les choix technologiques sont modernes et cohérents avec une application web .NET.

---
layout: two-cols
---

# Gestion de Projet

* **Compétence Évaluée :** "Contribuer à la gestion d’un projet informatique".
* **Méthodologie :**
    * Début : Exploration sans planification formelle -> Retard accumulé.
    * Mise en place (tardive) : Tableau Kanban sur **GitHub Projects**.
    * Colonnes : Backlog, Ready, In Progress, In Review, Done.
* **Apprentissages :** Importance cruciale de la planification et définition des contraintes **dès le début**.
* **Communication :** Interactions avec les formateurs via Teams.

::right::

# État d'Avancement (Exemple Kanban)

*(Image du tableau Kanban GitHub Projects)* 

* Visualisation des tâches et de leur état.
* Facilite le suivi et l'organisation.

La gestion de projet, bien qu'initiée tardivement de manière formelle, a permis de structurer le travail restant grâce à GitHub Projects. Une leçon apprise sur l'importance de la planification précoce.

---

# Architecture Technique & Fonctionnalité Clé

* **Architecture :** **MVC (Modèle-Vue-Contrôleur)** 
    * **Modèle :** Données à afficher.
    * **Vue :** Présentation de l'interface graphique.
    * **Contrôleur :** Logique des actions utilisateur.
    * **Avantages :** Séparation des responsabilités, maintenance, testabilité, réutilisabilité, collaboration, flexibilité.
* **Fonctionnalité :** Arrivée sur le site et interaction avec une recette.
    * **Scénario :**
        1. Arrivée sur l'accueil (carrousel).
        2. Clic sur une recette -> Redirection vers Connexion/Inscription.
        3. Création de compte -> Connexion.
        4. Accès au détail de la recette.
        5. Notation et ajout d'un commentaire.
        6. Rafraîchissement de la page avec le nouveau commentaire.

L'architecture MVC est un standard éprouvé. Le scénario utilisateur illustre le flux de base de l'application, de la découverte à l'interaction.

---

# Extrait de Code Significatif

**Contrôleur `Home`, Méthode `Index` (Page d'accueil)** 

* **Objectif :** Afficher les 10 meilleures recettes.
* **Étapes Clés :**
    1.  **Requête SQL (via Dapper ORM) :** Sélectionne les données des recettes, créateurs, nombre d'étapes/ingrédients/avis, et calcule la note moyenne. Utilise `LEFT JOIN` et `GROUP BY`.
    2.  **Exécution :** Ouvre une connexion (`NpgsqlConnection`), exécute la requête avec `connection.Query<Recipe, User, Recipe>(...)`. Mappe les résultats sur les objets `Recipe` et `User`.
    3.  **Mapping Relationnel :** Associe l'objet `User` (créateur) à chaque `Recipe`. Utilise `splitOn` pour indiquer comment séparer les données des différentes tables.
    4.  **Gestion d'Erreur :** Bloc `try-catch` pour gérer les exceptions de base de données. Affiche un message d'erreur via `TempData` et retourne une liste vide à la vue en cas d'échec.
    5.  **Retour à la Vue :** Passe la liste des `Recipe` (ou une liste vide) à la vue Razor (`return View(recipes);`) pour affichage.

```csharp {all|3-14|16|17-27|22-24|28-33|34}
public IActionResult Index()
{
    // Requête SQL pour obtenir les 10 meilleures recettes avec infos agrégées
    string query = @"SELECT
                        r.*,
                        COUNT(DISTINCT s.*) AS steps_count,
                        COUNT(DISTINCT ri.*) AS ingredients_count,
                        COUNT(DISTINCT rw.*) AS reviews_count,
                        ROUND(COALESCE(AVG(rw.rating), 0), 2) AS review_rating,
                        u.username, u.image_path
                    FROM recipes r
                    LEFT JOIN users u ON r.creator_id = u.id
                    LEFT JOIN reviews rw ON rw.recipe_id = r.id
                    LEFT JOIN recipes_ingredients ri ON ri.recipe_id = r.id
                    LEFT JOIN steps s ON s.recipe_id = r.id
                    GROUP BY r.id, u.username, u.image_path
                    ORDER BY review_rating DESC
                    LIMIT 10;";

    List<Recipe> recipes; // Déclaration de la liste

    using (var connection = new NpgsqlConnection(_connectionString)) // Connexion BD
    {
        try // Gestion d'erreur
        {
            // Exécution requête avec Dapper, mapping Recipe et User
            recipes = connection.Query<Recipe, User, Recipe>(query, (recipe, user) =>
            {
                recipe.creator = user; // Association du créateur
                return recipe;
            },
            splitOn: "id, username").ToList(); // Séparation et conversion en Liste
        }
        catch (Exception e)
        {
            Console.WriteLine(e); // Log erreur
            TempData["StatusMessage"] = "Error getting recipes from the database.";
            TempData["StatusMessageType"] = "error";
            return View(new List<Recipe>()); // Retourne vue avec liste vide
        }
    }
    return View(recipes); // Retourne la vue avec les recettes
  }
```

Cet extrait montre l'interaction entre le contrôleur, la base de données (via Dapper) et la vue dans une architecture MVC .NET Core. Il met en évidence l'utilisation d'un ORM et la gestion basique des erreurs.

---

# Sécurité Applicative : Attaques Courantes
La sécurité est une compétence clé du CDA. 
Les requêtes HTTP (navigation, formulaires) sont des vecteurs d'attaque potentiels.   

* **Injection SQL** 

    * **Principe :** L'attaquant insère du code SQL malveillant dans les entrées utilisateur (formulaires, URL).   
    * **Risque :** Modification de la requête SQL exécutée par le serveur si les entrées ne sont pas validées/nettoyées. Peut lire/modifier/supprimer des données.   
    * **Protection :**
    * **Requêtes Paramétrées / ORM :** Séparer le code SQL des données utilisateur (Dapper le fait). Les données sont traitées comme des valeurs littérales, non exécutables. Toujours utiliser cette méthode.   
    * **Validation des entrées :** Systématique côté serveur.   
    * **Principe du Moindre Privilège :** Limiter les droits du compte accédant à la base de données.   

---

* **CSRF (Cross-Site Request Forgery)**
    * **Principe :** Forcer un utilisateur authentifié à exécuter une action involontaire sur l'application.   
    * **Mécanisme :** L'attaquant crée une requête malveillante (lien, image, formulaire caché sur un autre site). Le navigateur de la victime envoie cette requête avec les cookies d'authentification vers l'application vulnérable.   
    * **Risque :** Modification de données, transfert de fonds, suppression de compte, etc..   
    * **Protection :**
    * **Tokens Anti-CSRF (Synchronizer Token Pattern) :**
Le serveur génère un token unique et imprévisible par session et l'intègre dans les formulaires.   
Lors de la soumission, le serveur vérifie que le token reçu correspond à celui attendu.   
    * **Implémentation ASP.NET Core :** Facile avec `Html.AntiForgeryToken()` (automatique depuis 2.0) dans la vue et l'attribut `[ValidateAntiForgeryToken]` sur l'action du contrôleur.   
Comprendre et contrer les attaques comme l'injection SQL et CSRF est essentiel. Les frameworks modernes comme ASP.NET Core offrent des protections intégrées qu'il faut utiliser systématiquement.

---

# Bilan du Jalon 1
  * **Apports :**
    * Première expérience sur un projet d'envergure mené à terme.   
    * Cadre clair grâce au cahier des charges et aux clarifications des formateurs.   
    * Consolidation des compétences techniques (ASP.NET Core MVC, C#, Front-end, BDD PostgreSQL).   
    * Mise en pratique des apprentissages de la formation.   
    * Exercice de la communication technique (demandes d'aide, explications).   
  * **Difficultés Rencontrées :**
    * **Gestion du temps et organisation initiale :** Tendance à la procrastination. Mise en place tardive du suivi structuré. **Principal axe d'amélioration.**   
  * **Points Forts :** Aisance avec les outils, indépendance.   
  & **Axes d'Amélioration :** Gestion de projet personnelle, régularité.   
Ce premier jalon a été très formateur, malgré des difficultés initiales d'organisation. Les compétences techniques ont été consolidées, et les axes d'amélioration pour la suite sont clairs.

---
layout: center 
class: text-center
---

# Perspectives & Remerciements
* **Perspectives :**
    * Direction du projet plus claire.   
    * Outils pour corriger les problèmes.   
    * Mise en place de meilleures habitudes de travail.   
    * Aborder le Jalon 2 (Desktop, API, Tests, Déploiement)  avec une meilleure organisation.   
**Remerciements :**
    * 2iSA : Qualité de la formation et moyens.   
    * Formateurs (Fabien & Théo) : Accompagnement, disponibilité, conseils, encouragement.   
    * Collègues de promotion : Entraide, échanges, ambiance de travail.   

**Merci de votre attention !**

Je suis maintenant mieux équipé pour la suite du projet. Je tiens à remercier sincèrement tous ceux qui ont contribué à cette première étape.